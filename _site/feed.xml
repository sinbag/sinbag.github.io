<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-11T13:52:14+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Garage</title><subtitle>Mathematical tools with code snippets</subtitle><entry><title type="html">Computing Fourier power spectrum</title><link href="http://localhost:4000/2024/06/11/fourier-power-spectrum.html" rel="alternate" type="text/html" title="Computing Fourier power spectrum" /><published>2024-06-11T00:00:00+02:00</published><updated>2024-06-11T00:00:00+02:00</updated><id>http://localhost:4000/2024/06/11/fourier-power-spectrum</id><content type="html" xml:base="http://localhost:4000/2024/06/11/fourier-power-spectrum.html"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### Author: Gurprit Singh
### January 5th, 2021
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">sys</span><span class="p">,</span> <span class="n">getopt</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">from</span> <span class="n">imageio</span> <span class="kn">import</span> <span class="n">imread</span><span class="p">,</span> <span class="n">imwrite</span>


<span class="k">def</span> <span class="nf">vectorized_power_spectrum</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">fourierParams</span><span class="p">):</span>
    <span class="n">resolution</span> <span class="o">=</span> <span class="n">fourierParams</span><span class="p">[</span><span class="sh">'</span><span class="s">resolution</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">xfreqStep</span> <span class="o">=</span> <span class="n">fourierParams</span><span class="p">[</span><span class="sh">'</span><span class="s">xfreqstep</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">yfreqStep</span> <span class="o">=</span> <span class="n">fourierParams</span><span class="p">[</span><span class="sh">'</span><span class="s">yfreqstep</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">numPoints</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">xlow</span> <span class="o">=</span> <span class="o">-</span><span class="n">resolution</span><span class="o">*</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">xfreqStep</span>
    <span class="n">xhigh</span> <span class="o">=</span> <span class="n">resolution</span><span class="o">*</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">xfreqStep</span>
    <span class="n">ylow</span> <span class="o">=</span> <span class="o">-</span><span class="n">resolution</span><span class="o">*</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">yfreqStep</span>
    <span class="n">yhigh</span> <span class="o">=</span> <span class="n">resolution</span><span class="o">*</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">yfreqStep</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">xlow</span><span class="p">,</span> <span class="n">xhigh</span><span class="p">,</span> <span class="n">xfreqStep</span><span class="p">)</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">ylow</span><span class="p">,</span> <span class="n">yhigh</span><span class="p">,</span> <span class="n">yfreqStep</span><span class="p">)</span>
    <span class="n">uu</span><span class="p">,</span> <span class="n">vv</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">meshgrid</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
    <span class="c1"># print(uu.shape, vv.shape)
</span>
    <span class="c1">#Compute fourier transform
</span>    <span class="n">dotXU</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">tensordot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="p">([</span><span class="n">uu</span><span class="p">,</span><span class="n">vv</span><span class="p">]),</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">angle</span> <span class="o">=</span> <span class="mf">2.0</span><span class="o">*</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span><span class="o">*</span><span class="n">dotXU</span>
    <span class="n">realCoeff</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">imagCoeff</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">angle</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1">#return power spectrum
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">realCoeff</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">imagCoeff</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">numPoints</span>


<span class="k">def</span> <span class="nf">random_sampler</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="n">sampler</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">N</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="n">sampler</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">random_sample</span><span class="p">()</span>
        <span class="n">sampler</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">random_sample</span><span class="p">()</span>
        <span class="c1">#print(sampler[i][0],sampler[i][1])
</span>    <span class="k">return</span> <span class="n">sampler</span>

<span class="k">def</span> <span class="nf">jitter_sampler</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">scale_domain</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
    <span class="n">sampler</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">N</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
    <span class="n">gridsize</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">N</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">gridsize</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">gridsize</span><span class="p">):</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">gridsize</span> <span class="o">+</span> <span class="n">y</span>
            <span class="n">sampler</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">random_sample</span><span class="p">())</span><span class="o">/</span><span class="n">gridsize</span>
            <span class="n">sampler</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">random_sample</span><span class="p">())</span><span class="o">/</span><span class="n">gridsize</span>
        <span class="c1">#print(sampler[i][0],sampler[i][1])
</span>    <span class="n">sampler</span> <span class="o">*=</span> <span class="n">scale_domain</span>
    <span class="k">return</span> <span class="n">sampler</span>

<span class="k">def</span> <span class="nf">readTXT</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">),</span> <span class="n">delimiter</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argv</span><span class="p">):</span>
    <span class="n">outputfile</span> <span class="o">=</span> <span class="sh">''</span>

<span class="c1">##############
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">.</span><span class="nf">getopt</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span><span class="sh">"</span><span class="s">hi:o:</span><span class="sh">"</span><span class="p">,[</span><span class="sh">"</span><span class="s">ofile=</span><span class="sh">"</span><span class="p">])</span>
    <span class="k">except</span> <span class="n">getopt</span><span class="p">.</span><span class="n">GetoptError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">power-spectrum.py -o &lt;outputfile [.exr format]&gt;</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">opt</span><span class="p">,</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opt</span> <span class="o">==</span> <span class="sh">'</span><span class="s">-h</span><span class="sh">'</span><span class="p">:</span>
            <span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">power-spectrum.py -o &lt;outputfile [output.exr]&gt;</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">opt</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--ofile</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">outputfile</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">Output file is </span><span class="sh">"'</span><span class="p">,</span> <span class="n">outputfile</span><span class="p">)</span>

    <span class="n">SAMPLERNAME</span><span class="o">=</span><span class="sh">'</span><span class="s">uniform_blue_noise</span><span class="sh">'</span> <span class="c1"># jitter # uniform_jitter # blue_noise # uniform_blue_noise
</span>    <span class="n">FOLDERNAME</span><span class="o">=</span><span class="sh">'</span><span class="s">data/geyser-duration_</span><span class="sh">'</span><span class="o">+</span><span class="n">SAMPLERNAME</span><span class="o">+</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span>

    <span class="n">spectralLossParams</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">resolution</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">128</span>
    <span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">xfreqstep</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">yfreqstep</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">resolution</span> <span class="o">=</span> <span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">resolution</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">XRES</span><span class="o">=</span><span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">resolution</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">YRES</span><span class="o">=</span><span class="n">spectralLossParams</span><span class="p">[</span><span class="sh">'</span><span class="s">resolution</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">sample_count</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="n">num_trials</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">powerAccum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">XRES</span><span class="p">,</span><span class="n">YRES</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">trial</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_trials</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">trial: </span><span class="sh">"</span><span class="p">,</span> <span class="n">trial</span><span class="p">)</span>

        <span class="n">trialstr</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">trial</span><span class="p">)</span>
        <span class="n">suffix</span> <span class="o">=</span> <span class="n">trialstr</span><span class="p">.</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

        <span class="c1">### If you want to test a sampler directly
</span>        <span class="n">samples</span> <span class="o">=</span> <span class="nf">jitter_sampler</span><span class="p">(</span><span class="n">sample_count</span><span class="p">,</span><span class="n">scale_domain</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">power</span> <span class="o">=</span> <span class="nf">vectorized_power_spectrum</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span><span class="n">spectralLossParams</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="sh">"</span><span class="s">float32</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">powerAccum</span> <span class="o">+=</span> <span class="n">power</span>
    <span class="n">powerAccum</span> <span class="o">/=</span> <span class="n">num_trials</span>
    <span class="n">powerAccum</span> <span class="o">=</span> <span class="n">powerAccum</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">"</span><span class="s">float32</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">imwrite</span><span class="p">(</span><span class="n">outputfile</span><span class="p">,</span> <span class="n">powerAccum</span><span class="p">)</span>



<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
   <span class="nf">main</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[```python Author: Gurprit Singh January 5th, 2021 import numpy as np import sys, getopt import math from imageio import imread, imwrite]]></summary></entry></feed>